#This is random comment
AWSTemplateFormatVersion: '2010-09-09'
Description: Template creates SES and SNS resouces

Parameters:
  env:
    Type: String
    Description: Which environment do you want to deploy to? (dev,stage, or prod)
    Default: dev
    AllowedValues:
      - dev
      - stage
      - prod

  EventType:
    Type: String
    Default: Send
    AllowedValues:
      - Send
      - Open
      - Click
      - Delivery
  
  # EmailIdentityName:
  #   Type: String
  #   Default: 'bazarhealth.com'

  # MySNSTopic:
  #   Type: String

Resources:
  emailTrackerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment: {Variables: {LOG_GROUP_NAME: !Ref CloudWatchLogsGroup, Event_type: !Ref EventType, LOG_LEVEL: 'INFO'}}
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log(`EVENT: ${JSON.stringify(event)}`);
            return {
                statusCode: 200,
            //  Uncomment below to enable CORS requests
            //  headers: {
            //      "Access-Control-Allow-Origin": "*",
            //      "Access-Control-Allow-Headers": "*"
            //  }, 
                body: JSON.stringify('Hello from Lambda!'),
            };
            };
      FunctionName: !Sub 'emailTrackerDemo-${env}'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs14.x
      Timeout: 10  

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Sid: ''
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - 
          PolicyName: CWLogsPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource: "arn:aws:logs:*:*:*"
                Effect: "Allow"
        
  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref emailTrackerLambda
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref MySNSTopic

  SESSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Id: 'SES-Events-Policy'
        Statement:
          - Effect: Allow
            Principal:
              Service: ses.amazonaws.com
            Action: sns:Publish
            Resource: !Ref MySNSTopic
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
                AWS:SourceArn: !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/{bazarhealth.com}'
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sns:Subscribe
            Resource: !Ref MySNSTopic
      Topics:
        - !Ref MySNSTopic

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'Sns-emailTrackerDemo-${env}'

#MyTopicSubscription
  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
        Protocol: lambda
        Endpoint: !GetAtt emailTrackerLambda.Arn
        TopicArn: !Ref MySNSTopic

  ConfigurationSet:
    Type: 'AWS::SES::ConfigurationSet'
    Properties:
      Name: !Sub 'emailTrackerTest-ConfigSetDemo-${env}'
      TrackingOptions:
        CustomRedirectDomain: 'bazarhealth.com'
      SendingOptions:
        SendingEnabled: true
  
  # MyEmailIdentity:
  #   Type: AWS::SES::EmailIdentity
  #   Properties:
  #     EmailIdentity: !Ref EmailIdentityName
  #     ConfigurationSetAttributes:
  #       ConfigurationSetName: !Ref ConfigurationSet

  EventDestination:
    Type: 'AWS::SES::ConfigurationSetEventDestination'
    Properties:
      ConfigurationSetName: !Ref ConfigurationSet
      EventDestination:
        Name: !Sub 'SNS-DestinationDemo-${env}'
        Enabled: true
        MatchingEventTypes:
          - 'send'
          - 'delivery'
          - 'open'
          - 'click'
        SnsDestination:
          TopicARN: !Ref MySNSTopic

  CloudWatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/emailTrackerDemo-${env}'
      RetentionInDays: 30

Outputs:
  Topicrn:
    Value: !Ref MySNSTopic

